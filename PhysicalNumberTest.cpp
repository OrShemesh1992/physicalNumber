* @since 2019-02
 */

#include <string>
#include <iostream>
#include <sstream>
using std::cout, std::endl, std::istringstream;
@@ -104,49 +105,47 @@ PhysicalNumber ton0(random[0], Unit::TON);
    .CHECK_OUTPUT(kg-kg, "0[kg]")
    .CHECK_OUTPUT((t+=g), "100.0001[ton]")

         .CHECK_OUTPUT(kg0-kg1, (random[0] - random[1]) +"[kg]")
         .CHECK_OUTPUT(kg1-kg2, (random[1] -random[2]) +"[kg]")
         .CHECK_OUTPUT(kg2-kg3, (random[2] - random[3]) +"[kg]")
         .CHECK_OUTPUT(kg3-kg4, (random[3] - random[4]) +"[kg]")
         .CHECK_OUTPUT(kg0-kg2, (random[0] - random[2]) +"[kg]")
         .CHECK_OUTPUT(kg0-kg3, (random[0] - random[3]) +"[kg]")
         .CHECK_OUTPUT(kg0-kg4, (random[0] - random[4]) +"[kg]")
        .CHECK_OUTPUT(kg1-kg3, (random[1] - random[3]) +"[kg]")
         .CHECK_OUTPUT(kg0+kg1, (random[0] + random[1]) +"[kg]")
         .CHECK_OUTPUT(kg1+kg2, (random[1] +random[2]) +"[kg]")
         .CHECK_OUTPUT(kg2+kg3, (random[2] + random[3]) +"[kg]")
         .CHECK_OUTPUT(kg3+kg4, (random[3] + random[4]) +"[kg]")
         .CHECK_OUTPUT(kg0+kg2, (random[0] + random[2]) +"[kg]")
         .CHECK_OUTPUT(kg0+kg3, (random[0] + random[3]) +"[kg]")
         .CHECK_OUTPUT(kg0+kg4, (random[0] + random[4]) +"[kg]")
        .CHECK_OUTPUT(kg1+kg3, (random[1] + random[3]) +"[kg]")
         .CHECK_OUTPUT(kg0-kg1, std::to_string(random[0] - random[1]) +"[kg]")
         .CHECK_OUTPUT(kg1-kg2, std::to_string(random[1] -random[2]) +"[kg]")
         .CHECK_OUTPUT(kg2-kg3, std::to_string(random[2] - random[3]) +"[kg]")
         .CHECK_OUTPUT(kg3-kg4, std::to_string(random[3] - random[4]) +"[kg]")
         .CHECK_OUTPUT(kg0-kg2, std::to_string(random[0] - random[2]) +"[kg]")
         .CHECK_OUTPUT(kg0-kg3, std::to_string(random[0] - random[3]) +"[kg]")
         .CHECK_OUTPUT(kg0-kg4, std::to_string(random[0] - random[4]) +"[kg]")
        .CHECK_OUTPUT(kg1-kg3, std::to_string(random[1] - random[3]) +"[kg]")
         .CHECK_OUTPUT(kg0+kg1, std::to_string(random[0] + random[1]) +"[kg]")
         .CHECK_OUTPUT(kg1+kg2,std::to_string (random[1] +random[2]) +"[kg]")
         .CHECK_OUTPUT(kg2+kg3, std::to_string(random[2] + random[3]) +"[kg]")
         .CHECK_OUTPUT(kg3+kg4, std::to_string(random[3] + random[4]) +"[kg]")
         .CHECK_OUTPUT(kg0+kg2, std::to_string(random[0] + random[2]) +"[kg]")
         .CHECK_OUTPUT(kg0+kg3, std::to_string(random[0] + random[3]) +"[kg]")
         .CHECK_OUTPUT(kg0+kg4, std::to_string(random[0] + random[4]) +"[kg]")
        .CHECK_OUTPUT(kg1+kg3, std::to_string(random[1] + random[3]) +"[kg]")

         .CHECK_OUTPUT(ton0-ton1, (random[0] - random[1]) +"[ton]")
         .CHECK_OUTPUT(ton1-ton2, (random[1] -random[2]) +"[ton]")
         .CHECK_OUTPUT(ton2-ton3, (random[2] - random[3]) +"[ton]")
         .CHECK_OUTPUT(ton3-ton4, (random[3] - random[4]) +"[ton]")
         .CHECK_OUTPUT(ton0-ton2, (random[0] - random[2]) +"[ton]")
         .CHECK_OUTPUT(ton0-ton3, (random[0] - random[3]) +"[ton]")
         .CHECK_OUTPUT(ton0-ton4, (random[0] - random[4]) +"[ton]")
        .CHECK_OUTPUT(ton1-ton3, (random[1] - random[3]) +"[ton]")
         .CHECK_OUTPUT(ton0+ton1, (random[0] + random[1]) +"[ton]")
         .CHECK_OUTPUT(ton1+ton2, (random[1] +random[2]) +"[ton]")
         .CHECK_OUTPUT(ton2+ton3, (random[2] + random[3]) +"[ton]")
         .CHECK_OUTPUT(ton3+ton4, (random[3] + random[4]) +"[ton]")
         .CHECK_OUTPUT(ton0+ton2, (random[0] + random[2]) +"[ton]")
         .CHECK_OUTPUT(ton0+ton3, (random[0] + random[3]) +"[ton]")
         .CHECK_OUTPUT(ton0+ton4, (random[0] + random[4]) +"[ton]")
        .CHECK_OUTPUT(ton1+ton3, (random[1] + random[3]) +"[ton]")
         .CHECK_OUTPUT(ton0-ton1, std::to_string(random[0] - random[1]) +"[ton]")
         .CHECK_OUTPUT(ton1-ton2, std::to_string(random[1] -random[2]) +"[ton]")
         .CHECK_OUTPUT(ton2-ton3, std::to_string(random[2] - random[3]) +"[ton]")
         .CHECK_OUTPUT(ton3-ton4,std::to_string (random[3] - random[4]) +"[ton]")
         .CHECK_OUTPUT(ton0-ton2, std::to_string(random[0] - random[2]) +"[ton]")
         .CHECK_OUTPUT(ton0-ton3, std::to_string(random[0] - random[3]) +"[ton]")
         .CHECK_OUTPUT(ton0-ton4,std::to_string (random[0] - random[4]) +"[ton]")
        .CHECK_OUTPUT(ton1-ton3, std::to_string(random[1] - random[3]) +"[ton]")
         .CHECK_OUTPUT(ton0+ton1, std::to_string(random[0] + random[1]) +"[ton]")
         .CHECK_OUTPUT(ton1+ton2, std::to_string(random[1] +random[2]) +"[ton]")
         .CHECK_OUTPUT(ton2+ton3, std::to_string(random[2] + random[3]) +"[ton]")
         .CHECK_OUTPUT(ton3+ton4, std::to_string(random[3] + random[4]) +"[ton]")
         .CHECK_OUTPUT(ton0+ton2, std::to_string(random[0] + random[2]) +"[ton]")
         .CHECK_OUTPUT(ton0+ton3, std::to_string(random[0] + random[3]) +"[ton]")
         .CHECK_OUTPUT(ton0+ton4, std::to_string(random[0] + random[4]) +"[ton]")
        .CHECK_OUTPUT(ton1+ton3, std::to_string(random[1] + random[3]) +"[ton]")
    //time 
    .CHECK_OUTPUT((h+=d), "300.5[hour]")
    .CHECK_OUTPUT(h, "300.5[hour]")
    .CHECK_OUTPUT((d+d), "60[min]")
    .CHECK_OUTPUT((c-c), "0[hour]")
    .CHECK_OUTPUT((d-d), "0[min]")
    .CHECK_OUTPUT((s-s), "0[sec]")
    //if when in calculation 2 defren type the result becomes the little one. 
    .CHECK_OUTPUT((min+c), "122[min]")
    .CHECK_OUTPUT((c-d), "90[min]")
    .CHECK_OUTPUT((c-=d), "1.5[hour]")
    .CHECK_OUTPUT(c, "1.5[hour]")
    .CHECK_OUTPUT((s+=min), "122[sec]")
@@ -156,55 +155,52 @@ PhysicalNumber ton0(random[0], Unit::TON);
    .CHECK_OUTPUT((d+=c), "122[min]")
    .CHECK_OUTPUT((d+=h), "18152[min]")
    .CHECK_OUTPUT((d+=s), "18154.033333333[min]")

     .CHECK_OUTPUT(secon, "5[sec]")
     .CHECK_OUTPUT(hour, "3[hour]")
     .CHECK_OUTPUT(minits, "60[min]")
     .CHECK_OUTPUT(hour-minits, "120[min]")
     .CHECK_OUTPUT(minits - hour, "-120[min]")
     .CHECK_OUTPUT(minits-secon, "3595[sec]")
    .CHECK_OUTPUT(secon - minits, "-3595[sec]")
    .CHECK_OUTPUT(hour-secon, "10795[sec]")



         .CHECK_OUTPUT(secon0-secon1, (random[0] - random[1]) +"[sec]")
         .CHECK_OUTPUT(secon1-secon2, (random[1] -random[2]) +"[sec]")
         .CHECK_OUTPUT(secon2-secon3, (random[2] - random[3]) +"[sec]")
         .CHECK_OUTPUT(secon3-secon4, (random[3] - random[4]) +"[sec]")
         .CHECK_OUTPUT(secon0-secon2, (random[0] - random[2]) +"[sec]")
         .CHECK_OUTPUT(secon0-secon3, (random[0] - random[3]) +"[sec]")
         .CHECK_OUTPUT(secon0-secon4, (random[0] - random[4]) +"[sec]")
        .CHECK_OUTPUT(secon1-secon3, (random[1] - random[3]) +"[sec]")
         .CHECK_OUTPUT(secon0+secon1, (random[0] + random[1]) +"[sec]")
         .CHECK_OUTPUT(secon1+secon2, (random[1] +random[2]) +"[sec]")
         .CHECK_OUTPUT(secon2+secon3, (random[2] + random[3]) +"[sec]")
         .CHECK_OUTPUT(secon3+secon4, (random[3] + random[4]) +"[sec]")
         .CHECK_OUTPUT(secon0+secon2, (random[0] + random[2]) +"[sec]")
         .CHECK_OUTPUT(secon0+secon3, (random[0] + random[3]) +"[sec]")
         .CHECK_OUTPUT(secon0+secon4, (random[0] + random[4]) +"[sec]")
        .CHECK_OUTPUT(secon1+secon3, (random[1] + random[3]) +"[sec]")
         .CHECK_OUTPUT(secon0-secon1, std::to_string(random[0] - random[1]) +"[sec]")
         .CHECK_OUTPUT(secon1-secon2, std::to_string(random[1] -random[2]) +"[sec]")
         .CHECK_OUTPUT(secon2-secon3, std::to_string(random[2] - random[3]) +"[sec]")
         .CHECK_OUTPUT(secon3-secon4, std::to_string(random[3] - random[4]) +"[sec]")
         .CHECK_OUTPUT(secon0-secon2, std::to_string(random[0] - random[2]) +"[sec]")
         .CHECK_OUTPUT(secon0-secon3, std::to_string(random[0] - random[3]) +"[sec]")
         .CHECK_OUTPUT(secon0-secon4, std::to_string(random[0] - random[4]) +"[sec]")
        .CHECK_OUTPUT(secon1-secon3, std::to_string(random[1] - random[3]) +"[sec]")
         .CHECK_OUTPUT(secon0+secon1, std::to_string(random[0] + random[1]) +"[sec]")
         .CHECK_OUTPUT(secon1+secon2, std::to_string(random[1] +random[2]) +"[sec]")
         .CHECK_OUTPUT(secon2+secon3, std::to_string(random[2] + random[3]) +"[sec]")
         .CHECK_OUTPUT(secon3+secon4, std::to_string(random[3] + random[4]) +"[sec]")
         .CHECK_OUTPUT(secon0+secon2, std::to_string(random[0] + random[2]) +"[sec]")
         .CHECK_OUTPUT(secon0+secon3, std::to_string(random[0] + random[3]) +"[sec]")
         .CHECK_OUTPUT(secon0+secon4, std::to_string(random[0] + random[4]) +"[sec]")
        .CHECK_OUTPUT(secon1+secon3, std::to_string(random[1] + random[3]) +"[sec]")

         .CHECK_OUTPUT(min0-min1, (random[0] - random[1]) +"[min]")
         .CHECK_OUTPUT(min1-min2, (random[1] -random[2]) +"[min]")
         .CHECK_OUTPUT(min2-min3, (random[2] - random[3]) +"[min]")
         .CHECK_OUTPUT(min3-min4, (random[3] - random[4]) +"[min]")
         .CHECK_OUTPUT(min0-min2, (random[0] - random[2]) +"[min]")
         .CHECK_OUTPUT(min0-min3, (random[0] - random[3]) +"[min]")
         .CHECK_OUTPUT(min0-min4, (random[0] - random[4]) +"[min]")
        .CHECK_OUTPUT(min1-min3, (random[1] - random[3]) +"[smin]")
         .CHECK_OUTPUT(min0+min1, (random[0] + random[1]) +"[min]")
         .CHECK_OUTPUT(min1+min2, (random[1] +random[2]) +"[min]")
         .CHECK_OUTPUT(min2+min3, (random[2] + random[3]) +"[min]")
         .CHECK_OUTPUT(min3+min4, (random[3] + random[4]) +"[min]")
         .CHECK_OUTPUT(min0+min2, (random[0] + random[2]) +"[min]")
         .CHECK_OUTPUT(min0+min3, (random[0] + random[3]) +"[min]")
         .CHECK_OUTPUT(min0+min4, (random[0] + random[4]) +"[min]")
        .CHECK_OUTPUT(min1+min3, (random[1] + random[3]) +"[min]")
        .CHECK_OUTPUT(secon1+min1, (random[1] + (random[1]*60)) +"[sec]")
        .CHECK_OUTPUT(secon0+min1, (random[0] + (random[1]*60)) +"[sec]")
        .CHECK_OUTPUT(secon2+min1, (random[2] + (random[1]*60)) +"[sec]")
        .CHECK_OUTPUT(secon3+min1, (random[3] + (random[1]*60)) +"[sec]")
        .CHECK_OUTPUT(secon1+min2, (random[1] + (random[2]*60)) +"[sec]")
         .CHECK_OUTPUT(min0-min1, std::to_string(random[0] - random[1]) +"[min]")
         .CHECK_OUTPUT(min1-min2, std::to_string(random[1] -random[2]) +"[min]")
         .CHECK_OUTPUT(min2-min3, std::to_string(random[2] - random[3]) +"[min]")
         .CHECK_OUTPUT(min3-min4, std::to_string(random[3] - random[4]) +"[min]")
         .CHECK_OUTPUT(min0-min2, std::to_string(random[0] - random[2]) +"[min]")
         .CHECK_OUTPUT(min0-min3, std::to_string(random[0] - random[3]) +"[min]")
         .CHECK_OUTPUT(min0-min4, std::to_string(random[0] - random[4]) +"[min]")
        .CHECK_OUTPUT(min1-min3, std::to_string(random[1] - random[3]) +"[smin]")
         .CHECK_OUTPUT(min0+min1, std::to_string(random[0] + random[1]) +"[min]")
         .CHECK_OUTPUT(min1+min2, std::to_string(random[1] +random[2]) +"[min]")
         .CHECK_OUTPUT(min2+min3, std::to_string(random[2] + random[3]) +"[min]")
         .CHECK_OUTPUT(min3+min4, std::to_string(random[3] + random[4]) +"[min]")
         .CHECK_OUTPUT(min0+min2, std::to_string(random[0] + random[2]) +"[min]")
         .CHECK_OUTPUT(min0+min3, std::to_string(random[0] + random[3]) +"[min]")
         .CHECK_OUTPUT(min0+min4, std::to_string(random[0] + random[4]) +"[min]")
        .CHECK_OUTPUT(min1+min3, std::to_string(random[1] + random[3]) +"[min]")
        .CHECK_OUTPUT(secon1+min1, std::to_string(random[1] + (random[1]*60)) +"[sec]")
        .CHECK_OUTPUT(secon0+min1, std::to_string(random[0] + (random[1]*60)) +"[sec]")
        .CHECK_OUTPUT(secon2+min1, std::to_string(random[2] + (random[1]*60)) +"[sec]")
        .CHECK_OUTPUT(secon3+min1, std::to_string(random[3] + (random[1]*60)) +"[sec]")
        .CHECK_OUTPUT(secon1+min2, std::to_string(random[1] + (random[2]*60)) +"[sec]")



         
  
   
      .setname("...")
      .print(cout, /*show_grade=*/false);
      grade = testcase.grade();
    } else {
      testcase.print_signal(signal);
      grade = 0;
    }
    cout <<  "*** Grade: " << grade << " ***" << endl;
    return grade;
}
